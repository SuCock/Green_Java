<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        tOVj3fwilSpVCn//2Q==
</value>
  </data>
</root>